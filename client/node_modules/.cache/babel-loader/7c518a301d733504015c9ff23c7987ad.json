{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peter\\\\Desktop\\\\React-Website\\\\client\\\\src\\\\Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport './style/Chat.css';\nimport Axios from 'axios';\n\nfunction Chat(props) {\n  const [alias, setAlias] = useState('(None)');\n  const [tempAlias, setTempAlias] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [messageLog, setMessageLog] = useState([]);\n  const [isNewUser, setIsNewUser] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('test');\n  const [flexClass, setFlexClass] = useState('BlurFlexContainer');\n  const [sessionId, setSessionId] = useState(0);\n  useEffect(() => {\n    getMessageLog();\n    setInterval(getMessageLog, 500);\n  }, []);\n\n  const startSession = () => {\n    Axios.get('http://localhost:3001/api/startSession', {\n      params: {\n        alias: tempAlias\n      }\n    }).then(response => {\n      setSessionId(response.data);\n    });\n  };\n\n  const endSession = () => {\n    Axios.delete('http://localhost:3001/api/endSession', {\n      data: {\n        sessionId: sessionId\n      }\n    });\n  };\n\n  const getMessageLog = () => {\n    Axios.get(\"http://localhost:3001/api/getMessage\").then(response => {\n      setMessageLog(response.data);\n    });\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    Axios.post('http://localhost:3001/api/insertMessage', {\n      alias: alias,\n      message: message\n    });\n  };\n\n  const createUser = e => {\n    e.preventDefault();\n    Axios.get(\"http://localhost:3001/api/isAliasUnique\", {\n      params: {\n        alias: tempAlias\n      }\n    }).then(response => {\n      if (response.data) {\n        if (tempAlias <= 20) {\n          setAlias(tempAlias);\n          setIsLogin(true);\n          startSession();\n          Axios.post(\"http://localhost:3001/api/insertUser\", {\n            alias: tempAlias,\n            password: password\n          });\n        } else {\n          setErrorMessage('Alias must be less than 20 characters.');\n          setHasError(true);\n        }\n      } else {\n        setErrorMessage('Alias has already been taken.');\n        setHasError(true);\n      }\n    });\n  };\n\n  const userLogin = e => {\n    e.preventDefault();\n    Axios.get(\"http://localhost:3001/api/isUserAuth\", {\n      params: {\n        alias: tempAlias,\n        password: password\n      }\n    }).then(response => {\n      if (response.data) {\n        setAlias(tempAlias);\n        setIsLogin(true);\n        startSession();\n      } else {\n        setErrorMessage('Account credentials are incorrect.');\n        setHasError(true);\n      }\n    });\n  };\n\n  const openCreateAlias = () => {\n    setIsNewUser(true);\n    setHasError(false);\n  };\n\n  const openLogin = () => {\n    setIsNewUser(false);\n    setHasError(false);\n  };\n\n  const logout = () => {\n    setIsLogin(false);\n    setAlias(\"(None)\");\n    endSession();\n  };\n\n  useEffect(() => {\n    if (isLogin) {\n      setFlexClass('FlexContainer');\n    } else {\n      setFlexClass('BlurFlexContainer');\n    }\n  }, [isLogin]);\n  useEffect(() => {\n    if (!hasError) {\n      setErrorMessage('');\n    }\n  }, [hasError]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, !isNewUser && !isLogin && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 42\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"Use previously created alias and password to login. (Passwords cannot be recovered). \"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"PopForm\",\n    onSubmit: userLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"AliasInput\",\n    required: true,\n    type: \"text\",\n    placeholder: \"Alias\",\n    onChange: e => {\n      setTempAlias(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"PasswordInput\",\n    type: \"password\",\n    placeholder: \"Password\",\n    onChange: e => {\n      setPassword(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, \"Login\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"PopSwitch\",\n    required: true,\n    onClick: openCreateAlias,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Create new alias.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, errorMessage)), isNewUser && !isLogin && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, \"Create new alias. Bad passwords will be shamed. (Passwords cannot be recovered).\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"PopForm\",\n    onSubmit: createUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"AliasInput\",\n    required: true,\n    type: \"text\",\n    placeholder: \"Unique Alias\",\n    onChange: e => {\n      setTempAlias(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"PasswordInput\",\n    required: true,\n    type: \"password\",\n    placeholder: \"Create Password\",\n    onChange: e => {\n      setPassword(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, \"Create Alias\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"PopSwitch\",\n    onClick: openLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"Login with alias.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, errorMessage)), /*#__PURE__*/React.createElement(\"div\", {\n    className: flexClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ChatBox ContainerItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ChatHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"OnlineUsers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"OnlineBullet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 29\n    }\n  }, \"\\u2022\"), \" Active Users: 7\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CurrentAlias\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  }, \"Current Alias: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"Alias\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 70\n    }\n  }, alias), \" | \"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"LogoutButton\",\n    onClick: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, \"Logout\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }, messageLog.map(val => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 36\n      }\n    }, \"<\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Alias\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 45\n      }\n    }, val.alias), \"> \", val.message);\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"MessageForm\",\n    onSubmit: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"MessageInput\",\n    required: true,\n    type: \"text\",\n    placeholder: \"Message\",\n    onChange: e => {\n      setMessage(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"SendButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }, \"Send\")))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/peter/Desktop/React-Website/client/src/Chat.js"],"names":["React","useEffect","useState","Axios","Chat","props","alias","setAlias","tempAlias","setTempAlias","password","setPassword","message","setMessage","messageLog","setMessageLog","isNewUser","setIsNewUser","isLogin","setIsLogin","hasError","setHasError","errorMessage","setErrorMessage","flexClass","setFlexClass","sessionId","setSessionId","getMessageLog","setInterval","startSession","get","params","then","response","data","endSession","delete","sendMessage","e","preventDefault","post","createUser","userLogin","openCreateAlias","openLogin","logout","target","value","map","val"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport './style/Chat.css';\r\nimport Axios from 'axios';\r\n\r\nfunction Chat(props) {\r\n    const [alias, setAlias] = useState('(None)');\r\n    const [tempAlias, setTempAlias] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messageLog, setMessageLog] = useState([]);\r\n    const [isNewUser, setIsNewUser] = useState(false);\r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const [hasError, setHasError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('test');\r\n    const [flexClass, setFlexClass] = useState('BlurFlexContainer');\r\n    const [sessionId, setSessionId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getMessageLog();\r\n        setInterval(getMessageLog, 500);\r\n    }, []);\r\n\r\n    const startSession = () => {\r\n        Axios.get('http://localhost:3001/api/startSession',{\r\n            params: {\r\n                alias: tempAlias\r\n            }\r\n        }).then((response) => {\r\n            setSessionId(response.data);\r\n        });\r\n    };\r\n\r\n    const endSession = () => {\r\n        Axios.delete('http://localhost:3001/api/endSession',{\r\n            data: {\r\n                sessionId: sessionId\r\n            }\r\n        });\r\n    };\r\n\r\n    const getMessageLog = () => {\r\n        Axios.get(\"http://localhost:3001/api/getMessage\").then((response) => {\r\n            setMessageLog(response.data);\r\n        });\r\n    };\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        Axios.post('http://localhost:3001/api/insertMessage', {\r\n            alias: alias, \r\n            message: message\r\n        });\r\n    };\r\n\r\n    const createUser = (e) => {\r\n        e.preventDefault();\r\n        Axios.get(\"http://localhost:3001/api/isAliasUnique\", {\r\n            params: {\r\n                alias: tempAlias\r\n            }\r\n        }).then((response) => {\r\n            if(response.data){\r\n                if(tempAlias <= 20){ \r\n                    setAlias(tempAlias);\r\n                    setIsLogin(true);\r\n                    startSession();\r\n                    Axios.post(\"http://localhost:3001/api/insertUser\", {\r\n                        alias: tempAlias,\r\n                        password: password\r\n                    });\r\n                } else {\r\n                    setErrorMessage('Alias must be less than 20 characters.');\r\n                    setHasError(true);\r\n                } \r\n            } else {\r\n                setErrorMessage('Alias has already been taken.');\r\n                setHasError(true);\r\n            }\r\n        });\r\n    };\r\n\r\n    const userLogin = (e) => {\r\n        e.preventDefault();\r\n        Axios.get(\"http://localhost:3001/api/isUserAuth\", {\r\n            params: {\r\n                alias: tempAlias,\r\n                password: password\r\n            }\r\n        }).then((response) => {\r\n            if(response.data){\r\n                setAlias(tempAlias);\r\n                setIsLogin(true);\r\n                startSession();\r\n            } else {\r\n                setErrorMessage('Account credentials are incorrect.');\r\n                setHasError(true);\r\n            }\r\n        });\r\n    };\r\n\r\n    const openCreateAlias = () => {\r\n        setIsNewUser(true);\r\n        setHasError(false);\r\n    };\r\n\r\n    const openLogin = () => {\r\n        setIsNewUser(false);\r\n        setHasError(false);\r\n    };\r\n\r\n    const logout = () => {\r\n        setIsLogin(false);\r\n        setAlias(\"(None)\");\r\n        endSession();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(isLogin){\r\n            setFlexClass('FlexContainer');\r\n        } else {\r\n            setFlexClass('BlurFlexContainer');\r\n        }\r\n    },[isLogin]);\r\n\r\n    useEffect(() => {\r\n        if(!hasError){\r\n            setErrorMessage('');\r\n        }\r\n    }, [hasError]);\r\n\r\n    return(\r\n        <div>\r\n            {(!isNewUser && !isLogin) && <div className='PopBox'>\r\n                <div className='PopMessage'>Use previously created alias and password to login. (Passwords cannot be recovered). </div>\r\n                <form className='PopForm' onSubmit={userLogin}>\r\n                    <input className='AliasInput' required type='text' placeholder='Alias' onChange={(e) => {\r\n                        setTempAlias(e.target.value);\r\n                    }}/><br/>\r\n                    <input className='PasswordInput' type='password' placeholder='Password' onChange={(e) => {\r\n                        setPassword(e.target.value);\r\n                    }}/><br/>\r\n                    <button>Login</button>\r\n                </form><br/>\r\n                <button className=\"PopSwitch\" required onClick={openCreateAlias}>Create new alias.</button>\r\n                <div className='Error'>{errorMessage}</div>\r\n            </div>}\r\n\r\n            {(isNewUser && !isLogin) && <div className='PopBox'>\r\n            <div className='PopMessage'>Create new alias. Bad passwords will be shamed. (Passwords cannot be recovered).</div>\r\n                <form className='PopForm' onSubmit={createUser}>\r\n                    <input className='AliasInput' required type='text' placeholder='Unique Alias' onChange={(e) => {\r\n                        setTempAlias(e.target.value);\r\n                    }}/><br/>\r\n                    <input className='PasswordInput' required type='password' placeholder='Create Password' onChange={(e) => {\r\n                        setPassword(e.target.value);\r\n                    }}/><br/>\r\n                    <button>Create Alias</button>\r\n                </form><br/>\r\n                <button className=\"PopSwitch\" onClick={openLogin}>Login with alias.</button>\r\n                <div className='Error'>{errorMessage}</div>\r\n            </div>}\r\n\r\n            <div className={flexClass}>\r\n                <div className='ChatBox ContainerItem'>\r\n                    <div className='ChatHeader'>\r\n                        <div className='OnlineUsers'>\r\n                            <span className='OnlineBullet'>&#8226;</span> Active Users: 7\r\n                        </div>\r\n                        <div className='CurrentAlias'>Current Alias: <span className='Alias'>{alias}</span> | </div>\r\n                        <button className='LogoutButton' onClick={logout}>Logout</button>\r\n                    </div>\r\n                    <div className='MessageBox'>\r\n                        {messageLog.map((val) => {\r\n                            return <div>&lt;<span className='Alias'>{val.alias}</span>&gt; {val.message}</div>\r\n                        })}\r\n                    </div>\r\n                \r\n                    <form className='MessageForm' onSubmit={sendMessage}>\r\n                        <input className='MessageInput' required type='text' placeholder='Message' onChange={(e) => {\r\n                            setMessage(e.target.value);\r\n                        }}/>\r\n                        <button className='SendButton'>Send</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}