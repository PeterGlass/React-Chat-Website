{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peter\\\\Desktop\\\\React-Website\\\\client\\\\src\\\\Chat.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport './style/Chat.css';\nimport Axios from 'axios';\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\n\nfunction Chat(props) {\n  const [alias, setAlias] = useState('(None)');\n  const [tempAlias, setTempAlias] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [messageLog, setMessageLog] = useState([]);\n  const [isNewUser, setIsNewUser] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('test');\n  const [flexClass, setFlexClass] = useState('BlurFlexContainer');\n  const [sessionId, setSessionId] = useState(0);\n  const [userCount, setUserCount] = useState(0);\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  useEffect(scrollToBottom, [messageLog]);\n  useEffect(() => {\n    getMessageLog();\n    setInterval(getMessageLog, 500);\n  }, []);\n  useEffect(() => {\n    getUserCount();\n    setInterval(getUserCount, 500);\n  }, []);\n\n  const cleanup = e => {\n    e.preventDefault();\n    console.log(test);\n    endSession();\n  };\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', cleanup);\n    return () => window.removeEventListener('beforeunload', cleanup);\n  }, [cleanup]);\n\n  const getUserCount = () => {\n    Axios.get('http://localhost:3001/api/getUserCount').then(response => {\n      setUserCount(response.data[0].user_count);\n    });\n  };\n\n  const startSession = () => {\n    Axios.get('http://localhost:3001/api/startSession', {\n      params: {\n        alias: tempAlias\n      }\n    }).then(response => {\n      setSessionId(response.data[1][0].session_id);\n    });\n  };\n\n  const endSession = () => {\n    Axios.delete('http://localhost:3001/api/endSession', {\n      data: {\n        sessionId: sessionId\n      }\n    });\n    setSessionId(0);\n  };\n\n  const getMessageLog = () => {\n    Axios.get(\"http://localhost:3001/api/getMessage\").then(response => {\n      setMessageLog(response.data);\n    });\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    Axios.post('http://localhost:3001/api/insertMessage', {\n      alias: alias,\n      message: message\n    });\n  };\n\n  const createUser = e => {\n    e.preventDefault();\n    Axios.get(\"http://localhost:3001/api/isAliasUnique\", {\n      params: {\n        alias: tempAlias\n      }\n    }).then(response => {\n      if (response.data) {\n        if (tempAlias <= 20) {\n          setAlias(tempAlias);\n          setIsLogin(true);\n          startSession();\n          Axios.post(\"http://localhost:3001/api/insertUser\", {\n            alias: tempAlias,\n            password: password\n          });\n        } else {\n          setErrorMessage('Alias must be less than 20 characters.');\n          setHasError(true);\n        }\n      } else {\n        setErrorMessage('Alias has already been taken.');\n        setHasError(true);\n      }\n    });\n  };\n\n  const userLogin = e => {\n    e.preventDefault();\n    Axios.get(\"http://localhost:3001/api/isUserAuth\", {\n      params: {\n        alias: tempAlias,\n        password: password\n      }\n    }).then(response => {\n      if (response.data) {\n        setAlias(tempAlias);\n        setIsLogin(true);\n        startSession();\n      } else {\n        setErrorMessage('Account credentials are incorrect.');\n        setHasError(true);\n      }\n    });\n  };\n\n  const openCreateAlias = () => {\n    setIsNewUser(true);\n    setHasError(false);\n  };\n\n  const openLogin = () => {\n    setIsNewUser(false);\n    setHasError(false);\n  };\n\n  const logout = () => {\n    setIsLogin(false);\n    setAlias(\"(None)\");\n    endSession();\n  };\n\n  useEffect(() => {\n    if (isLogin) {\n      setFlexClass('FlexContainer');\n    } else {\n      setFlexClass('BlurFlexContainer');\n    }\n  }, [isLogin]);\n  useEffect(() => {\n    if (!hasError) {\n      setErrorMessage('');\n    }\n  }, [hasError]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, !isNewUser && !isLogin && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 42\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, \"Use previously created alias and password to login. (Passwords cannot be recovered). \"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"PopForm\",\n    onSubmit: userLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"AliasInput\",\n    required: true,\n    type: \"text\",\n    placeholder: \"Alias\",\n    onChange: e => {\n      setTempAlias(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"PasswordInput\",\n    type: \"password\",\n    placeholder: \"Password\",\n    onChange: e => {\n      setPassword(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, \"Login\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"PopSwitch\",\n    required: true,\n    onClick: openCreateAlias,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, \"Create new alias.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, errorMessage)), isNewUser && !isLogin && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PopMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"Create new alias. Bad passwords will be shamed. (Passwords cannot be recovered).\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"PopForm\",\n    onSubmit: createUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"AliasInput\",\n    required: true,\n    type: \"text\",\n    placeholder: \"Unique Alias\",\n    onChange: e => {\n      setTempAlias(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"PasswordInput\",\n    required: true,\n    type: \"password\",\n    placeholder: \"Create Password\",\n    onChange: e => {\n      setPassword(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, \"Create Alias\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"PopSwitch\",\n    onClick: openLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, \"Login with alias.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, errorMessage)), /*#__PURE__*/React.createElement(\"div\", {\n    className: flexClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ChatBox ContainerItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ChatHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"OnlineUsers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"OnlineBullet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 29\n    }\n  }, \"\\u2022\"), \" Active Users: \", userCount), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CurrentAlias\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, \"Current Alias: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"Alias\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 70\n    }\n  }, alias), \" | \"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"LogoutButton\",\n    disabled: !isLogin,\n    onClick: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 25\n    }\n  }, \"Logout\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  }, messageLog.map(val => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 40\n      }\n    }, \"<\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Alias\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 49\n      }\n    }, val.alias), \"> \", val.message);\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"MessageForm\",\n    onSubmit: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"MessageInput\",\n    disabled: !isLogin,\n    required: true,\n    type: \"text\",\n    placeholder: \"Message\",\n    onChange: e => {\n      setMessage(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"SendButton\",\n    disabled: !isLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }, \"Send\")))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/peter/Desktop/React-Website/client/src/Chat.js"],"names":["React","useEffect","useState","useRef","Axios","SimpleBar","Chat","props","alias","setAlias","tempAlias","setTempAlias","password","setPassword","message","setMessage","messageLog","setMessageLog","isNewUser","setIsNewUser","isLogin","setIsLogin","hasError","setHasError","errorMessage","setErrorMessage","flexClass","setFlexClass","sessionId","setSessionId","userCount","setUserCount","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","getMessageLog","setInterval","getUserCount","cleanup","e","preventDefault","console","log","test","endSession","window","addEventListener","removeEventListener","get","then","response","data","user_count","startSession","params","session_id","delete","sendMessage","post","createUser","userLogin","openCreateAlias","openLogin","logout","target","value","height","map","val"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport './style/Chat.css';\r\nimport Axios from 'axios';\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\n\r\nfunction Chat(props) {\r\n    const [alias, setAlias] = useState('(None)');\r\n    const [tempAlias, setTempAlias] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messageLog, setMessageLog] = useState([]);\r\n    const [isNewUser, setIsNewUser] = useState(false);\r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const [hasError, setHasError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('test');\r\n    const [flexClass, setFlexClass] = useState('BlurFlexContainer');\r\n    const [sessionId, setSessionId] = useState(0);\r\n    const [userCount, setUserCount] = useState(0);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    useEffect(scrollToBottom, [messageLog]);\r\n\r\n    useEffect(() => {\r\n        getMessageLog();\r\n        setInterval(getMessageLog, 500);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getUserCount();\r\n        setInterval(getUserCount, 500);\r\n    }, []);\r\n\r\n    const cleanup = (e) => {\r\n        e.preventDefault();\r\n        console.log(test);\r\n        endSession();\r\n    }\r\n\r\n    useEffect(() => {\r\n      \r\n        window.addEventListener('beforeunload', cleanup);\r\n      \r\n        return () => window.removeEventListener('beforeunload', cleanup);\r\n        \r\n      }, [cleanup]);\r\n\r\n    const getUserCount = () => {\r\n        Axios.get('http://localhost:3001/api/getUserCount').then((response) => {\r\n            setUserCount(response.data[0].user_count);\r\n        });\r\n    };\r\n\r\n    const startSession = () => {\r\n        Axios.get('http://localhost:3001/api/startSession',{\r\n            params: {\r\n                alias: tempAlias\r\n            }\r\n        }).then((response) => {\r\n            setSessionId(response.data[1][0].session_id);\r\n        });\r\n    };\r\n\r\n    const endSession = () => {\r\n        Axios.delete('http://localhost:3001/api/endSession',{\r\n            data: {\r\n                sessionId: sessionId\r\n            }\r\n        });\r\n        setSessionId(0);\r\n    };\r\n\r\n    const getMessageLog = () => {\r\n        Axios.get(\"http://localhost:3001/api/getMessage\").then((response) => {\r\n            setMessageLog(response.data);\r\n        });\r\n    };\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        Axios.post('http://localhost:3001/api/insertMessage', {\r\n            alias: alias, \r\n            message: message\r\n        });\r\n    };\r\n\r\n    const createUser = (e) => {\r\n        e.preventDefault();\r\n        Axios.get(\"http://localhost:3001/api/isAliasUnique\", {\r\n            params: {\r\n                alias: tempAlias\r\n            }\r\n        }).then((response) => {\r\n            if(response.data){\r\n                if(tempAlias <= 20){ \r\n                    setAlias(tempAlias);\r\n                    setIsLogin(true);\r\n                    startSession();\r\n                    Axios.post(\"http://localhost:3001/api/insertUser\", {\r\n                        alias: tempAlias,\r\n                        password: password\r\n                    });\r\n                } else {\r\n                    setErrorMessage('Alias must be less than 20 characters.');\r\n                    setHasError(true);\r\n                } \r\n            } else {\r\n                setErrorMessage('Alias has already been taken.');\r\n                setHasError(true);\r\n            }\r\n        });\r\n    };\r\n\r\n    const userLogin = (e) => {\r\n        e.preventDefault();\r\n        Axios.get(\"http://localhost:3001/api/isUserAuth\", {\r\n            params: {\r\n                alias: tempAlias,\r\n                password: password\r\n            }\r\n        }).then((response) => {\r\n            if(response.data){\r\n                setAlias(tempAlias);\r\n                setIsLogin(true);\r\n                startSession();\r\n            } else {\r\n                setErrorMessage('Account credentials are incorrect.');\r\n                setHasError(true);\r\n            }\r\n        });\r\n    };\r\n\r\n    const openCreateAlias = () => {\r\n        setIsNewUser(true);\r\n        setHasError(false);\r\n    };\r\n\r\n    const openLogin = () => {\r\n        setIsNewUser(false);\r\n        setHasError(false);\r\n    };\r\n\r\n    const logout = () => {\r\n        setIsLogin(false);\r\n        setAlias(\"(None)\");\r\n        endSession();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(isLogin){\r\n            setFlexClass('FlexContainer');\r\n        } else {\r\n            setFlexClass('BlurFlexContainer');\r\n        }\r\n    },[isLogin]);\r\n\r\n    useEffect(() => {\r\n        if(!hasError){\r\n            setErrorMessage('');\r\n        }\r\n    }, [hasError]);\r\n\r\n    return(\r\n        <div>\r\n            {(!isNewUser && !isLogin) && <div className='PopBox'>\r\n                <div className='PopMessage'>Use previously created alias and password to login. (Passwords cannot be recovered). </div>\r\n                <form className='PopForm' onSubmit={userLogin}>\r\n                    <input className='AliasInput' required type='text' placeholder='Alias' onChange={(e) => {\r\n                        setTempAlias(e.target.value);\r\n                    }}/><br/>\r\n                    <input className='PasswordInput' type='password' placeholder='Password' onChange={(e) => {\r\n                        setPassword(e.target.value);\r\n                    }}/><br/>\r\n                    <button>Login</button>\r\n                </form><br/>\r\n                <button className=\"PopSwitch\" required onClick={openCreateAlias}>Create new alias.</button>\r\n                <div className='Error'>{errorMessage}</div>\r\n            </div>}\r\n\r\n            {(isNewUser && !isLogin) && <div className='PopBox'>\r\n            <div className='PopMessage'>Create new alias. Bad passwords will be shamed. (Passwords cannot be recovered).</div>\r\n                <form className='PopForm' onSubmit={createUser}>\r\n                    <input className='AliasInput' required type='text' placeholder='Unique Alias' onChange={(e) => {\r\n                        setTempAlias(e.target.value);\r\n                    }}/><br/>\r\n                    <input className='PasswordInput' required type='password' placeholder='Create Password' onChange={(e) => {\r\n                        setPassword(e.target.value);\r\n                    }}/><br/>\r\n                    <button>Create Alias</button>\r\n                </form><br/>\r\n                <button className=\"PopSwitch\" onClick={openLogin}>Login with alias.</button>\r\n                <div className='Error'>{errorMessage}</div>\r\n            </div>}\r\n            \r\n            <div className={flexClass}>\r\n                <div className='ChatBox ContainerItem'>\r\n                    <div className='ChatHeader'>\r\n                        <div className='OnlineUsers'>\r\n                            <span className='OnlineBullet'>&#8226;</span> Active Users: {userCount}\r\n                        </div>\r\n                        <div className='CurrentAlias'>Current Alias: <span className='Alias'>{alias}</span> | </div>\r\n                        <button className='LogoutButton' disabled={!isLogin} onClick={logout}>Logout</button>\r\n                    </div>\r\n                    <div className='MessageBox'>\r\n                        <SimpleBar style={{height: \"100%\" }}>\r\n                            {messageLog.map((val) => {\r\n                                return <div>&lt;<span className='Alias'>{val.alias}</span>&gt; {val.message}</div>\r\n                            })}\r\n                            <div ref={messagesEndRef} />\r\n                        </SimpleBar>\r\n                    </div>\r\n                    <form className='MessageForm' onSubmit={sendMessage}>\r\n                        <input className='MessageInput' disabled={!isLogin} required type='text' placeholder='Message' onChange={(e) => {\r\n                            setMessage(e.target.value);\r\n                        }}/>\r\n                        <button className='SendButton' disabled={!isLogin}>Send</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}